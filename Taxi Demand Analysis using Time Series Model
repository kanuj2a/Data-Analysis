---
title: "R Notebook"
output:
  html_document: default
  html_notebook: default
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}
library(fst)
library(zoo)
library(lubridate)
library(dplyr)
library(data.table)
gc()
```

Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
```{r}



gc()
dat <- fread("D:/GL_Capstone_Proj/yellow_tripdata_2015-01-06.csv",select = c("tpep_pickup_datetime","pickup_longitude","pickup_latitude"))
#dat <- fread("D:/GL_Capstone_Proj/yellow_tripdata_2015-01-06.csv",select = c("tpep_pickup_datetime"))


gc()
str(dat)

#library(fst)
#write.fst(dat,"D:/GL_Capstone_Proj/yellow_tripdata_full.fst")

gc()
dat$datetime = ymd_hms(dat$tpep_pickup_datetime)
max(dat$datetime)

str(dat)
```


```{r}
#str(taxi_data)
gc()
fun <- function(x){
    quantiles <- quantile( x, c(.05, .95 ) )
    x[ x < quantiles[1] ] <- quantiles[1]
    x[ x > quantiles[2] ] <- quantiles[2]
    return(x)
}

dat$pickup_longitude = fun(dat$pickup_longitude)
dat$pickup_latitude = fun(dat$pickup_latitude)

#taxi_data$dropoff_latitude = fun(taxi_data$dropoff_latitude)
#taxi_data$dropoff_longitude = fun(taxi_data$dropoff_longitude)
#head(taxi_data)

dat$pickup_longitude = round(dat$pickup_longitude,digits = 1)
#dat$dropoff_longitude = round(dat$dropoff_longitude, digits = 2)

dat$pickup_latitude = round(dat$pickup_latitude,digits = 1)
#dat$dropoff_latitude = round(dat$dropoff_latitude, digits = 2)
 
##head(taxi_data)
gc()
dat

dat$location = paste(dat$pickup_latitude,dat$pickup_longitude,sep = "")

#dat = dat[,c(1,4)]
gc()
X = NULL
X = dat %>% group_by(pickup_longitude,pickup_latitude,datetime) %>% summarise(count = n()) 
X

dat = NULL
gc()
temp_df = X %>% group_by(pickup_longitude,pickup_latitude) %>% mutate(interval = floor_date(datetime, unit="30 minutes")) %>% group_by(interval) %>% mutate(sum_val = sum(count)) %>% select(pickup_longitude, pickup_latitude,interval, sum_val)

?floor_date

temp_df
X = NULL
gc()
temp_df_1 = temp_df %>% distinct(pickup_longitude,pickup_latitude,interval,.keep_all = TRUE)


temp_df = NULL
gc()
str(temp_df_1)
temp_df_1$pickup_longitude = round(temp_df_1$pickup_longitude,digits = 3)
#dat$dropoff_longitude = round(dat$dropoff_longitude, digits = 2)

temp_df_1$pickup_latitude = round(temp_df_1$pickup_latitude,digits = 3)
temp_df_1

temp_df_2 <- temp_df_1 %>% group_by(pickup_longitude,pickup_latitude,interval) %>% summarise(pickups = sum(sum_val))


temp_df_2
```



```{r}
df_loc = dat %>% group_by(location) %>% summarise(no = n()) %>% arrange(desc(no))
df_loc
#df_loc[12,1]
for(i in 1:nrow(df_loc))
{
  print(i)
  name <- paste("df", i, sep = "_")
  var = df_loc$location[i]
  assign(name,as.data.frame(dat %>% filter(location == var)))
  gc()
}
gc()
```


```{r}
df_list = NULL

df_list<-list()

for (j in 1:4)
{
  z <- j
  sEOG <- paste("df_", z, sep="")
  dEOG <- get(paste("df_", z, sep=""))
  df_list[[sEOG]] <-dEOG
}

gc()

# function to produce half hourly data
create_ts <- function(temp_df)
{
  pickup_data = temp_df %>% group_by(datetime) %>% summarise(pickups = n())
  new_df = aggregate(pickup_data$pickups ~ cut(pickup_data$datetime,"30 min"),pickup_data,sum)
  return(new_df)

}

for(i in 1:4)
{
  print(i)
  name <- paste("df_ts", i, sep = "_")
  assign(name, as.data.frame(create_ts(df_list[[i]])))
}

gc()


#pickup_data = dat %>% group_by(tpep_pickup_datetime) %>% summarise(pickups = n())
#pickup_data
#str(pickup_data)
gc()
#pickup_data$tpep_pickup_datetime = ymd_hms(pickup_data$tpep_pickup_datetime)
#gc()
#temp_df_2 = aggregate(pickup_data$pickups ~ cut(pickup_data$tpep_pickup_datetime,"30 min"),pickup_data,sum)

```



```{r}
# rename columns of each time series df
df_list = NULL
df_list = list(df_ts_1,df_ts_2,df_ts_4,df_ts_4)



change_colname <- function(temp_df)
{
  colnames(temp_df) <- c("date_time","pickups")
  return(temp_df)
}

for(i in 1:4)
{
  print(i)
  name <- paste("df_ts", i, sep = "_")
  assign(name, as.data.frame(change_colname(df_list[[i]])))
}

df_ts_1
gc()


dEOG = df_1 = df_2 = df_3 = df_4 = dat = NULL
gc()

tail(df_ts_1[336:8064,])

#write.csv(df_ts_1,"D:/GL_Capstone_Proj/first_time_series.csv")
#write.csv(df_ts_2,"D:/GL_Capstone_Proj/second_time_series.csv")
#write.csv(df_ts_3,"D:/GL_Capstone_Proj/third_time_series.csv")
#write.csv(df_ts_4,"D:/GL_Capstone_Proj/fourth_time_series.csv")

df_ts_1 = read.csv("D:/GL_Capstone_Proj/first_time_series.csv")
df_ts_2 = read.csv("D:/GL_Capstone_Proj/second_time_series.csv")
df_ts_3 = read.csv("D:/GL_Capstone_Proj/third_time_series.csv")
df_ts_4 = read.csv("D:/GL_Capstone_Proj/fourth_time_series.csv")

```


```{r}
plot(df_ts_2$date_time,df_ts_2$pickups)
tail(df_ts_2)
df_ts_2

df_ts_2$date_time = ymd_hms(df_ts_2$date_time)
df_ts_3$date_time = ymd_hms(df_ts_3$date_time)
df_ts_4$date_time = ymd_hms(df_ts_4$date_time)

DateRange <- seq(min(df_ts_4$date_time), max(df_ts_4$date_time), by = 1800) 
#DateRange
DateRange[!DateRange %in% df_ts_4$date_time] 



boxplot(df_ts_1$pickups)
boxplot(df_ts_2$pickups)
boxplot(df_ts_3$pickups)
boxplot(df_ts_4$pickups)
```




```{r}

########################################## HW additive Model - for series 1 ###############################################
y = ts(df_ts_1$pickups[336:8064], frequency = 336)

mape = Inf
#?HoltWinters

for(i in seq(0.1,1,0.1))
{
  for(j in seq(0,1,0.1))
  {
    for(k in seq(0,1,0.1))
    {
      #hw_model = HoltWinters(y,seasonal = "additive",start.periods = 336)
      hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = i,beta = j,gamma = k,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_1$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      #print(APE_add)
      temp_mape = mean(result_comp$diff/result_comp$actual)
      #print(result_comp$forecast)
      #result_comp+
      if(mape > temp_mape)
      {
        mape = temp_mape
        best_i = i
        best_j = j
        best_k = k
      }
    }
  }
}

# additive - i,j,k = (.1,0,0)
# mult - i,j,k = (.1,0,.2)
hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = best_i,beta = best_j,gamma = best_k,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_1$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      #print(APE_add)
      temp_mape = mean(result_comp$diff/result_comp$actual)
      #temp_mape
      
      #plot(result_comp$diff,type = "l")
      
      #result_comp
      temp_mape
      #hw_model
      write.csv(result_comp,"D:/GL_Capstone_Proj/holt_winter_for_1st_ts_result_mult.csv")
```


```{r}

########################################## HW additive Model - for series 2 ###############################################
y = ts(df_ts_2$pickups[336:8064], frequency = 336)

mape = Inf
#?HoltWinters

for(i in seq(0.1,1,0.1))
{
  for(j in seq(0,1,0.1))
  {
    for(k in seq(0,1,0.1))
    {
      #hw_model = HoltWinters(y,seasonal = "additive",start.periods = 336)
      hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = i,beta = j,gamma = k,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_2$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      
      temp_mape = mean(result_comp$diff/result_comp$actual)
      #print(temp_mape)
      #print(result_comp$forecast)
      #result_comp+
      if(mape > temp_mape)
      {
        mape = temp_mape
        best_i = i
        best_j = j
        best_k = k
      }
    }
  }
}

#i,j,k - add - 0.2,0,0
#i,j,k - mult - 0.1,0.0.1


hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = best_i,beta = best_j,gamma = best_k,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_2$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      #print(APE_add)
      temp_mape = mean(result_comp$diff/result_comp$actual)
      temp_mape
      
      #plot(result_comp$diff,type = "l")
      print(best_i)
      print(best_j)
      print(best_k)
      #result_comp
      write.csv(result_comp,"D:/GL_Capstone_Proj/holt_winter_for_2nd_ts_result_mult.csv")
```


```{r}

########################################## HW additive Model - for series 3 ###############################################
y = ts(df_ts_3$pickups[336:8064], frequency = 336)

mape = Inf
#?HoltWinters

for(i in seq(0.1,1,0.1))
{
  for(j in seq(0,1,0.1))
  {
    for(k in seq(0,1,0.1))
    {
      #hw_model = HoltWinters(y,seasonal = "additive",start.periods = 336)
      hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = i,beta = j,gamma = k,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_3$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      
      temp_mape = mean(result_comp$diff/result_comp$actual)
      #print(temp_mape)
      #print(result_comp$forecast)
      #result_comp+
      if(mape > temp_mape)
      {
        mape = temp_mape
        best_i = i
        best_j = j
        best_k = k
      }
    }
  }
}

# i,j,k  add = (0.5,0,0)
#i,j,k - mult = 0.7,0,0.2

hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = best_i,beta = best_j,gamma = best_k,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_3$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      #print(APE_add)
      temp_mape = mean(result_comp$diff/result_comp$actual)
      print(temp_mape)
      
      print(best_i)
      print(best_j)
      print(best_k)
      write.csv(result_comp,"D:/GL_Capstone_Proj/holt_winter_for_3rd_ts_result_mult.csv")
      
```




```{r}

########################################## HW additive Model - for series 4 ###############################################
y = ts(df_ts_4$pickups[336:8064], frequency = 336)

mape = Inf
#?HoltWinters

for(i in seq(0.1,1,0.1))
{
  for(j in seq(0,1,0.1))
  {
    for(k in seq(0,1,0.1))
    {
      #hw_model = HoltWinters(y,seasonal = "additive",start.periods = 336)
      hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = i,beta = j,gamma = k,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_4$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      
      temp_mape = mean(result_comp$diff/result_comp$actual)
      #print(temp_mape)
      #print(result_comp$forecast)
      #result_comp+
      if(mape > temp_mape)
      {
        mape = temp_mape
        best_i = i
        best_j = j
        best_k = k
      }
    }
  }
}

print(best_i)
print(best_j)
print(best_k)

#i,j,k - add 0.3,0.8,0
# i,j,k - mult 0.3,0,0.3
hw_model = HoltWinters(y, seasonal = "multiplicative",alpha = 0.3,beta = 0,gamma = 0.3,start.periods = 336)
      #hw_model$alpha
      #hw_model$beta
      #hw_model$gamma
      forecast <- predict(hw_model, n.ahead = 336, prediction.interval = T, level = 0.95)
      #plot(hw_model, forecast)
      result_comp = as.data.frame(cbind(forecast[,1],df_ts_4$pickups[8065:8400])) 
      colnames(result_comp) = c("forecast","actual")
      result_comp$diff = abs(result_comp$forecast - result_comp$actual)
      APE_add = sum(result_comp$diff)/sum(result_comp$actual) * 100 
      print(APE_add)
      temp_mape = mean(result_comp$diff/result_comp$actual)
      print(temp_mape)
      
      plot(result_comp$diff,type = "l")
      
      result_comp
      write.csv(result_comp,"D:/GL_Capstone_Proj/holt_winter_for_4th_ts_result_mult.csv")
```



```{r}
gc()
library(forecast)
train_tbat = msts(df_ts_4$pickups[336:8064],seasonal.periods = c(48))
test_tbat = msts(df_ts_4$pickups[8065:8400],seasonal.periods = c(48))
#?tbats
gc()
tbat_model = tbats(train_tbat,use.arma.errors = TRUE)
tbat_model

tbat_forecast = forecast(tbat_model, h=96)
plot(tbat_forecast)
result_comp_tabt = as.data.frame(cbind(tbat_forecast$mean[1:96],df_ts_4$pickups[8065:8160])) 
colnames(result_comp_tabt) = c("forecast","actual")
result_comp_tabt$diff = abs(result_comp_tabt$forecast - result_comp_tabt$actual)

result_comp_tabt
APE_mult = sum(result_comp_tabt$diff)/sum(result_comp_tabt$actual) * 100 
print(APE_mult)

mape = mean(result_comp_tabt$diff/result_comp_tabt$actual)
mape

write.csv(result_comp_tabt,"D:/GL_Capstone_Proj/tbat_result_4.csv")
```


```{r}
gc()
library(forecast)
train_tbat = msts(df_ts_2$pickups[336:8064],seasonal.periods = c(48))
test_tbat = msts(df_ts_2$pickups[8065:8400],seasonal.periods = c(48))
#?tbats
gc()
tbat_model = tbats(train_tbat, use.arma.errors = TRUE)
tbat_model

tbat_forecast = forecast(tbat_model)
plot(tbat_forecast)
result_comp_tabt = as.data.frame(cbind(tbat_forecast$mean[1:96],df_ts_1$pickups[8065:8160])) 
colnames(result_comp_tabt) = c("forecast","actual")
result_comp_tabt$diff = abs(result_comp_tabt$forecast - result_comp_tabt$actual)

result_comp_tabt
APE_mult = sum(result_comp_tabt$diff)/sum(result_comp_tabt$actual) * 100 
print(APE_mult)

mape = mean(result_comp_tabt$diff/result_comp_tabt$actual)
mape
mean(abs(result_comp_tabt$actual - result_comp_tabt$forecast)/result_comp_tabt$actual)

 
write.csv(result_comp_tabt,"D:/GL_Capstone_Proj/tbat_result_4.csv")
```


```{r}
gc()
library(forecast)
train_tbat = msts(df_ts_2$pickups[336:8064],seasonal.periods = c(48))
test_tbat = msts(df_ts_2$pickups[8065:8400],seasonal.periods = c(48))
#?tbats
gc()
tbat_model = tbats(train_tbat,use.arma.errors = TRUE)
tbat_model

tbat_forecast = forecast(tbat_model)
plot(tbat_forecast)
tbat_forecast$mean
result_comp_tabt = as.data.frame(cbind(tbat_forecast$mean[1:96],df_ts_2$pickups[8065:8160])) 
colnames(result_comp_tabt) = c("forecast","actual")
result_comp_tabt$diff = abs(result_comp_tabt$forecast - result_comp_tabt$actual)

result_comp_tabt
APE_mult = sum(result_comp_tabt$diff)/sum(result_comp_tabt$actual) * 100 
print(APE_mult)

mape = mean(result_comp_tabt$diff/result_comp_tabt$actual)
mape
mean(abs(result_comp_tabt$actual - result_comp_tabt$forecast)/result_comp_tabt$actual)
```


```{r}
gc()
library(forecast)
train_tbat = msts(df_ts_3$pickups[336:8064],seasonal.periods = c(48))
test_tbat = msts(df_ts_3$pickups[8065:8400],seasonal.periods = c(48))
#?tbats
gc()
tbat_model = tbats(train_tbat,use.arma.errors = TRUE)
tbat_model

tbat_forecast = forecast(tbat_model)
plot(tbat_forecast)
tbat_forecast$mean
result_comp_tabt = as.data.frame(cbind(tbat_forecast$mean[1:96],df_ts_3$pickups[8065:8160])) 
colnames(result_comp_tabt) = c("forecast","actual")
result_comp_tabt$diff = abs(result_comp_tabt$forecast - result_comp_tabt$actual)

result_comp_tabt
APE_mult = sum(result_comp_tabt$diff)/sum(result_comp_tabt$actual) * 100 
print(APE_mult)

mape = mean(result_comp_tabt$diff/result_comp_tabt$actual)
mape
mean(abs(result_comp_tabt$actual - result_comp_tabt$forecast)/result_comp_tabt$actual)
```



```{r}
############################### arima with fourier terms n = 336 ################
bestfit = list()


y = df_ts_1$pickups[336:8064]
for(i in 1:5)
{
    
    z1 <- fourier(y,K=i)
    fit <- auto.arima(y, xreg=z1, seasonal=F)
    if(i == 1)
    {
      bestfit <- list(aicc=fit$aicc, i=i, fit=fit)
    }
    if(fit$aicc < bestfit$aicc)
    {
      bestfit <- list(aicc=fit$aicc, i=i, fit=fit)
    }
  
}

############### iteration 1 has lowest aicc value 
bestfit
z1 <- fourier(y,K=1)
fit <- auto.arima(y, xreg=z1, seasonal=F)

#fc <- forecast(bestfit$fit, xreg=fourier(y,K=bestfit$i), h=336)
fc <- forecast(fit, xreg=fourier(y,K=1), h=336)
fc$mean

result_comp = as.data.frame(cbind(fc$mean[1:336],df_ts_1$pickups[8065:8400])) 
colnames(result_comp) = c("forecast","actual")
result_comp$diff = abs(result_comp$forecast - result_comp$actual)
result_comp

MAPE_mult = sum(result_comp$diff)/sum(result_comp$actual) * 100 
print(MAPE_mult)


mean(result_comp$diff/result_comp$actual)

```


```{r}
y = df_ts_1$pickups[336:8064]
aicc = 0
# Choose the best model by AICc
for(i in 1:10) {
  for (j in 1:6){
    z1 <- fourier(ts(y, frequency=48), K=i)
    z2 <- fourier(ts(y, frequency=336), K=j)
    fit <- auto.arima(y, xreg=cbind(z1, z2), seasonal=F)
    if(aicc < bestfit$aicc) {
      bestfit <- list(aicc=fit$aicc, i=i, j=j, fit=fit)
    }
  }
}

bestfit


z1 <- fourier(ts(y, frequency=48), K=20)
z2 <- fourier(ts(y, frequency=336), K=6)
fit <- auto.arima(y, xreg=cbind(z1, z2), seasonal=F)
    
fc <- forecast(fit,xreg=cbind(fourier(ts(y, frequency=48), K=20, h=336),fourier(ts(y, frequency=336), K=6, h=336)))
plot(fc)

#result_comp = as.data.frame(cbind(fc$mean[1:336],df_ts_1$pickups[8065:8400])) 
result_comp = as.data.frame(cbind(fc$mean[1:336],df_ts_1$pickups[8065:8400])) 
colnames(result_comp) = c("forecast","actual")
result_comp$diff = abs(result_comp$forecast - result_comp$actual)
result_comp

#MAPE_mult = sum(result_comp$diff)/sum(result_comp$actual) * 100 
#print(MAPE_mult)


mean(result_comp$diff/result_comp$actual)
```



```{r}
y = df_ts_3$pickups[336:8064]
aicc = 0
mape = Inf
bestfit = NULL
final_i = 0

# Choose the best model by AICc
for(i in 1:15) 
{
  for(j in 1:6)
  {
    z1 <- fourier(ts(y, frequency=48), K=i)
    z2 <- fourier(ts(y, frequency=336), K=j)
    fit <- auto.arima(y, xreg=cbind(z1,z2), seasonal=F)
    if(aicc < fit$aicc) {
      bestfit <- list(aicc=fit$aicc, i=i,j=j, fit=fit)
    }
    fc <- fc <- forecast(bestfit$fit,xreg=cbind(fourier(ts(y, frequency=48), K=i, h=336),fourier(ts(y, frequency=336), K=j, h=336)))
    result_comp = as.data.frame(cbind(fc$mean[1:336],df_ts_3$pickups[8065:8400])) 
    colnames(result_comp) = c("forecast","actual")
    mape_comp = mean(abs(result_comp$actual-result_comp$forecast)/result_comp$actual)
    if(mape > mape_comp){
      mape = mape_comp
      final_i = i
    }
  }
}

bestfit

z1 <- fourier(ts(y, frequency=48), K=5)
z2 <- fourier(ts(y, frequency=336), K=1)
fit <- auto.arima(y, xreg=cbind(z1,z2), seasonal=F)

fc <- forecast(fit,xreg=cbind(fourier(ts(y, frequency=48), K=5, h=336),fourier(ts(y, frequency=336), K=1, h=336)))
plot(fc)

#result_comp = as.data.frame(cbind(fc$mean[1:336],df_ts_1$pickups[8065:8400])) 
result_comp = as.data.frame(cbind(fc$mean[1:336],df_ts_3$pickups[8065:8400])) 
colnames(result_comp) = c("forecast","actual")
result_comp$diff = abs(result_comp$forecast - result_comp$actual)
result_comp

MAPE_mult = sum(result_comp$diff)/sum(result_comp$actual) * 100 
print(MAPE_mult)

mean(abs(result_comp$actual-result_comp$forecast)/result_comp$actual)

mean(result_comp$diff/result_comp$actual)


#write.csv(result_comp,"")
write.csv(result_comp,"D:/GL_Capstone_Proj/arima_result_3.csv")



```

